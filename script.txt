1. hello world
2. add input component
3. show #ref syntax for getting value
4. show (click) syntax
5. demonstrate (contextmenu) and $event
6. show @Output for adding item
7. move to (submit) ???
8. show move to [value]/(change)
9. show move to [ngModel]/(ngModelChange)
10. show move to [(ngModel)]
11. add list component with *ngFor
12. show @Input for passing todos in
13. move to service, first in list, then in input

Part2:
1. explain @Inject() for none-typescript and values
2. provide/inject string value
3. add todo item dto with completed
4. show [hidden] binding for completed
5. move to [ngClass] with color
6. show view encapsulation for color/bgColor
7. show that initial todos can be downloaded using fetch (explain zones)














add toggle on click
add pipe that filters completed/pending
show immutability issue, both for add & toggle
add router-outlet for view/edit modes
add router-link and show they use same model
show model split using nested injectors
show location strategy override
show ngModel classes for controls
show ref to control using #name="ngForm"

move to http, explain about observables
new Control, [ngFormControl]

form controls, custom validators
reactive programming
animations
creating directives (attribute vs structure)
require controller
ngContent (aka transclusion)
server side rendering
native app rendering
